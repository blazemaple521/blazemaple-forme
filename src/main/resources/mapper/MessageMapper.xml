<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.blazemaple.forum.mapper.MessageMapper">

    <resultMap id="BaseResultMap" type="com.blazemaple.forum.domain.entity.Msg">
            <id property="id" column="id" jdbcType="INTEGER"/>
            <result property="fromId" column="fromId" jdbcType="INTEGER"/>
            <result property="toId" column="toId" jdbcType="INTEGER"/>
            <result property="conversationId" column="conversationId" jdbcType="VARCHAR"/>
            <result property="content" column="content" jdbcType="VARCHAR"/>
            <result property="status" column="status" jdbcType="INTEGER"/>
            <result property="createTime" column="createTime" jdbcType="TIMESTAMP"/>
    </resultMap>

    <sql id="selectFields">
        id, fromId, toId, conversationId, content, status, createTime
    </sql>
    <update id="updateStatus">
        update message set status = #{status}
        where id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

    <select id="selectConversations" resultType="com.blazemaple.forum.domain.entity.Msg">
        select
        <include refid="selectFields"></include>
        from message
        where id in (
        select max(id) from message
        where status != 2
        and fromId != 1
        and (fromId = #{userId} or toId = #{userId})
        group by conversationId
        )
        order by id desc
        limit #{offset}, #{limit}
    </select>

    <select id="selectConversationCount" resultType="int">
        select count(m.maxid) from (
                                       select max(id) as maxid from message
                                       where status != 2
                                         and fromId != 1
                                         and (fromId = #{userId} or toId = #{userId})
                                       group by conversationId
                                   ) as m
    </select>

    <select id="selectLetters" resultType="com.blazemaple.forum.domain.entity.Msg">
        select
        <include refid="selectFields"></include>
        from message
        where status != 2
        and fromId != 1
        and conversationId = #{conversationId}
        order by id desc
        limit #{offset}, #{limit}
    </select>

    <select id="selectLetterCount" resultType="int">
        select count(id)
        from message
        where status != 2
          and fromId != 1
          and conversationId = #{conversationId}
    </select>

    <select id="selectLetterUnreadCount" resultType="int">
        select count(id)
        from message
        where status = 0
        and fromId != 1
        and toId = #{userId}
        <if test="conversationId!=null">
            and conversationId = #{conversationId}
        </if>
    </select>


    <select id="selectLatestNotice" resultType="com.blazemaple.forum.domain.entity.Msg">
        select
        <include refid="selectFields"></include>
        from message
        where id in(
        select max(id) from message
        where status!=2
        and fromId=1
        and toId=#{userId}
        and conversationId=#{topic}
        )
    </select>

    <select id="selectNoticeCount" resultType="int">
        select count(id) from message
        where status != 2
          and fromId = 1
          and toId = #{userId}
          and conversationId = #{topic}
    </select>


    <select id="selectNoticeUnreadCount" resultType="int">
        select count(id) from message
        where status =0
        and fromId = 1
        and toId = #{userId}
        <if test="topic!=null">
            and conversationId = #{topic}
        </if>
    </select>

    <select id="selectNotices" resultType="com.blazemaple.forum.domain.entity.Msg">
        select
        <include refid="selectFields"></include>
        from message
        where status != 2
        and fromId = 1
        and toId = #{userId}
        and conversationId = #{topic}
        order by createTime desc
        limit #{offset},#{limit}
    </select>
</mapper>
